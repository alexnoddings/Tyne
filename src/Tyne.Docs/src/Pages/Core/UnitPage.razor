@page "/tyne/unit"
@attribute [DocsPage(PageCategory.Core, "Unit")]

<TyneTitle Value="Unit" />

<MudText Typo="Typo.h3">
    Unit
</MudText>

<DocSection>
    <Title>Overview</Title>
    <ChildContent>
        <MudText Typo="Typo.body1">
            The unit type is a type that indicates the absence of a specific value; the unit type has only a single value, which acts as a placeholder when no other value exists or is needed.
            It is strongly inspired by <MudLink Href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/unit-type">F#'s unit type</MudLink> to bring some functional paradigms to C#.
        </MudText>
    </ChildContent>
</DocSection>

<DocSection>
    <Title>Use case</Title>
    <ChildContent>
        <MudText Typo="Typo.body1">
            The elevator pitch for @Keyword("Unit") is that it simplifies generic interface design.
            It means only one interface is needed to express an action which may or may not take an input or produce an output.
            Without unit, 4 interfaces would be required for the 4 permutations of 2 inputs.
        </MudText>
        <MudText Typo="Typo.body1">
            As an example from C#'s core library, the @Keyword("Action") type is essentially a @Keyword("Func<void>").
            However, since C# doesn't have first-class support for @Keyword("void") as a type, the @Keyword("Action") interface is required instead.
        </MudText>
    </ChildContent>
</DocSection>

<DocSection>
    <Title>Usage</Title>
    <ChildContent>
        <MudText Typo="Typo.body1">
            The value of @Keyword("Unit") should be accessed through @Keyword("Unit.Value"), or @Keyword("unit") if aliasing is enabled.
            Alternatively, @Keyword("Unit.AsTask") and @Keyword("Unit.AsValueTask") provide a @Keyword("Task") or @Keyword("ValueTask") respectively which resolve to @Keyword("Unit.Value").
            While Units can be constructed, there is no value in doing so as it cannot be modified in any way.
        </MudText>
    </ChildContent>
</DocSection>

<DocSection>
    <Title>Aliasing</Title>
    <ChildContent>
        <MudText Typo="Typo.body1">
            Aliasing makes @Keyword("Unit") appear like the @Keyword("void") type. By adding the following to your @Keyword("csproj"), you can access @Keyword("Unit.Value") through the keyword-alike @Keyword("unit").
        </MudText>
        <pre>
            &lt;ItemGroup&gt;
                &lt;Using Include="Tyne.UnitAlias" Static="true" /&gt;
            &lt;/ItemGroup&gt;
        </pre>
    </ChildContent>
</DocSection>








