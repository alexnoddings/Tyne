@namespace Tyne.UI.Tables
@typeparam TResult
@typeparam TSearch
@typeparam TValue
@inherits TyneSelectColumnBase<TResult, TSearch, TValue>

@Render(
	@<text>
		@if (Type == TyneSelectColumnType.Radio)
		{
			<MudRadioGroup T="TValue" SelectedOption="Value" SelectedOptionChanged="SetValueAsync">
				<div class="d-flex flex-column">
					@foreach (var selectValue in AvailableSelectValues)
					{
						<MudRadio @key="selectValue.AsKey" Option="selectValue.Value">
							@if (selectValue.ChildContent is not null)
							{
								@selectValue.ChildContent
							}
							else
							{
								@(selectValue.Value?.ToString() ?? "(null)")
							}
						</MudRadio>
					}
				</div>
			</MudRadioGroup>
		}
		else if (Type == TyneSelectColumnType.Dropdown)
		{
			<MudSelect T="TValue" Value="Value" ValueChanged="SetValueAsync">
				@foreach (var selectValue in AvailableSelectValues)
				{
					<MudSelectItem @key="selectValue.AsKey" Value="selectValue.Value">
						@if (selectValue.ChildContent is not null)
						{
							@selectValue.ChildContent
						}
						else
						{
							@(selectValue.Value?.ToString() ?? "!(null)")
						}
					</MudSelectItem>
				}
			</MudSelect>
		}
		else
		{
			throw new ArgumentOutOfRangeException(nameof(Type), "Unknown column type.");
		}
	</text>
)

<CascadingValue TValue="ITyneSelectColumn<TValue>" IsFixed="true" Value="this">
	@Values
</CascadingValue>

@code
{
	protected override RenderFragment RenderPopover(RenderFragment content) =>
		@<MudPopover Open="IsFilterVisible"
					 Fixed="true"
					 AnchorOrigin="Origin.TopLeft"
					 TransformOrigin="Origin.BottomLeft">
		<div class="d-flex align-start px-2 pb-2">
				<span class="mt-3">
					@RenderCloseButton()
				</span>
				<span class="mr-4">
					@content
				</span>
				<span class="mt-3">
					@RenderClearButton()
				</span>
			</div>
		</MudPopover>;
}