@using Tyne.Results
@typeparam TResult
@typeparam TSearch
@namespace Tyne.UI.Tables

<div style="position: relative">
	<MudOverlay Visible="IsLoading && LoadingBehaviour != TableLoadingBehaviour.None" 
				DarkBackground="LoadingBehaviour == TableLoadingBehaviour.LockControlsWithOverlay" 
				Absolute="true" />
	<CascadingValue TValue="ITyneTableFacade<TSearch>" Value="Facade" IsFixed="true">
		<MudTable T="TResult"
				  @ref="Table"
				  Class="tyne-table"
				  ServerData="LoadDataAsync"
				  Dense="Dense"
				  Hover="Hover"
				  Striped="Striped"
				  Loading="IsLoading"
				  LoadingProgressColor="Color.Primary"
				  HeaderContent="Headers"
				  RowTemplate="RowTemplate"
				  NoRecordsContent="NoData ?? DefaultNoData"
				  PagerContent="Footer ?? DefaultFooter"
				  OnRowClick="OnRowClicked"
				  CustomFooter="true">
			<ToolBarContent>
				<div class="d-flex flex-column flex-1">
					<MudToolBar Dense="true" DisableGutters="true">
						@Toolbar
					</MudToolBar>
					@if (LoadDataResult is not null)
					{
						@((Result ?? DefaultResult).Invoke(LoadDataResult))
					}
				</div>
			</ToolBarContent>
			<LoadingContent>
				<div class="my-n3">
					@(Loading ?? DefaultLoading)
				</div>
			</LoadingContent>
		</MudTable>
	</CascadingValue>
</div>

@code {
	private RenderFragment DefaultNoData { get; } =
		@<div>
			<MudIcon Icon="@Icons.Material.Filled.SearchOff" />
			<MudText>No data found</MudText>
		</div>;

	private RenderFragment DefaultLoading { get; } =
		@<text>
			@for (var i = 0; i < 10; i++)
			{
				<div class="mud-table-row d-flex">
					<div class="mud-table-cell flex-grow-1">
						<MudSkeleton Class="flex-grow-1" />
					</div>
				</div>
			}
		</text>;

	private RenderFragment DefaultFooter { get; } =
		@<MudTablePager />;

	private RenderFragment<Result<SearchResults<TResult>>> DefaultResult { get; } = 
		result => 
		{
			var messageMetadata = result.Metadata.OfType<IMessageMetadata>().ToList();
			if (messageMetadata.Count == 0)
				return _ => { };

			return 
				@<div>
					@DefaultRenderMetadataOfType(Severity.Error, messageMetadata.OfType<IErrorMetadata>())
					@DefaultRenderMetadataOfType(Severity.Info, messageMetadata.OfType<IInfoMetadata>())
					@DefaultRenderMetadataOfType(Severity.Success, messageMetadata.OfType<ISuccessMetadata>())
				</div>;
		};

	private static RenderFragment DefaultRenderMetadataOfType(Severity severity, IEnumerable<IMessageMetadata> metadatas) =>
		metadatas.Any()
		? @<MudAlert Severity="severity" Class="mb-1">
			@foreach (var metadata in metadatas)
			{
				<p>@metadata.Message</p>
			}
		</MudAlert>
		: _ => { };
}