@typeparam TModel
@using Microsoft.AspNetCore.Components.Forms
@using Tyne.Results
@using Tyne.Validation

@{
    throw new NotImplementedException($"{nameof(BuildRenderTree)} should be overridden by {GetType().FullName}.");
}
@code
{
    protected virtual RenderFragment RenderMetadata()
    {
        var metadataExcludingValidationErrors =
            FormResult.Metadata
                .OfType<IMessageMetadata>()
                // Ignore any metadata which is validation related as the fields components should have the error applied,
                // unless the property is empty as no field component would pick it up
                .Where(metadata => metadata is not IValidationErrorMetadata validationErrorMetadata || string.IsNullOrEmpty(validationErrorMetadata.PropertyName));

        return
            @<div class="d-flex flex-column gap-1">
                @foreach (var metadata in metadataExcludingValidationErrors)
                {
                    @RenderIndividualMetadata(metadata);
                }
            </div>;
    }

    protected virtual RenderFragment RenderIndividualMetadata(IMessageMetadata metadata)
    {
        var severity = metadata switch
        {
            IErrorMetadata => Severity.Error,
            IInfoMetadata => Severity.Info,
            ISuccessMetadata => Severity.Success,
            _ => Severity.Normal,
        };
        
        return
            @<MudAlert Class="mb-2" Severity="severity" Variant="Variant.Outlined" ShowCloseIcon="true" CloseIconClicked="() => FormResult.Metadata.RemoveAll(resultMetadata => resultMetadata == metadata)">
                <p class="mb-1">
                    @metadata.Message
                </p>
            </MudAlert>;
    }

    protected virtual RenderFragment RenderSaveButton() =>
        @<MudButton OnClick="SaveAsync"
                Disabled="State is not FormState.Ready || FormResult.Metadata.OfType<IFormValidationErrorMetadata>().Any(error => !string.IsNullOrWhiteSpace(error.PropertyName))"
                Variant="Variant.Filled"
                Color="Color.Primary"
                StartIcon="@(State is FormState.Ready ? Icons.Material.Filled.Save : string.Empty)">
            @if (State is FormState.Loading or FormState.Saving)
            {
                    <MudProgressCircular Class="ml-n2 mr-2" Size="Size.Small" Indeterminate="true" />
            }
            Save
        </MudButton>;

    protected virtual RenderFragment Render(RenderFragment<TModel> content) =>
        Render(@<form>Loading...</form>, content);

    protected virtual RenderFragment Render(RenderFragment loadingContent, RenderFragment<TModel> content) =>
        ModelInstance is null
        ? RenderBody(loadingContent)
        : @<EditForm @ref="EditForm" Model="ModelInstance">
                @if (Validator is not null)
                {
                        <TyneFormFluentValidator TModel="TModel" Result="FormResult" Validator="Validator" />
                }
                @RenderBody(@content(ModelInstance))
            </EditForm>;

    protected virtual RenderFragment RenderBody(RenderFragment content) =>
        @<div class="d-flex flex-column gap-2">@content</div>;
}