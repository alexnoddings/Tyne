@using Tyne.Blazor.Filtering;
@using Tyne.Searching;
@using Tyne.Blazor.Filtering.Context;
@namespace Tyne.Blazor.Tables
@typeparam TRequest where TRequest : ISearchQuery, new()
@typeparam TResponse
@inherits MudTable<TResponse>
@implements ITyneTable2
@implements IDisposable

@if (_filterContext.IsFaulted)
{
    <div class="@Classname" style="@Style">
        <div class="mud-table-container" style="@TableStyle">
            <table class="mud-table-root">
                <tbody class="mud-table-body">
                    <tr>
                        <td>
                            <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                                An error occurred while loading the table.
                            </MudAlert>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
}
else
{
    <CascadingValue TValue="IFilterContext<TRequest>" Value="_filterContext" IsFixed="true">
        @ValueFilters
        @((RenderFragment)base.BuildRenderTree)
    </CascadingValue>
}
