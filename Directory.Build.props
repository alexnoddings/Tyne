<Project>

  <PropertyGroup Label="Project Info">
    <Product>Tyne</Product>
    <Authors>Alex Noddings</Authors>
    <Copyright>Copyright 2023 Alex Noddings</Copyright>
    <PackageTags>tyne</PackageTags>
    <StrongNameKeyId>AlexNTyne</StrongNameKeyId>
    <NeutralLanguage>en</NeutralLanguage>
    <DefaultLanguage>en-GB</DefaultLanguage>
  </PropertyGroup>

  <PropertyGroup Label="Project flags">
    <IsTestProject>false</IsTestProject>
    <IsTestProject Condition="$(MSBuildProjectName.EndsWith('Tests'))">true</IsTestProject>
    <IsPackable>true</IsPackable>
    <IsPackable Condition="$(IsTestProject)">false</IsPackable>
    <IsPackable Condition=" $(MSBuildProjectName) == '.docs' ">false</IsPackable>
    <IsPackable Condition=" $(MSBuildProjectName.StartsWith('Example')) ">false</IsPackable>
    <ContinuousIntegrationBuild Condition=" '$(GITHUB_ACTIONS)' == 'true' ">true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <PropertyGroup Label="Conventions">
    <LangVersion>preview</LangVersion>
    <Features>$(Features);strict</Features>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <AccelerateBuildsInVisualStudio>true</AccelerateBuildsInVisualStudio>
    <ArtifactsPath>$(MSBuildThisFileDirectory)artifacts</ArtifactsPath>
  </PropertyGroup>

  <PropertyGroup Label="Versioning">
    <TyneMajorVersion>3</TyneMajorVersion>
    <TyneMinorVersion>0</TyneMinorVersion>
    <TynePatchVersion>0</TynePatchVersion>
    <TynePreReleaseTag>preview0</TynePreReleaseTag>
    <Version>$(TyneMajorVersion).$(TyneMinorVersion).$(TynePatchVersion)</Version>
    <Version Condition=" '$(TynePreReleaseTag)' != '' ">$(Version)-$(TynePreReleaseTag)</Version>
    <PackageVersion>$(Version)</PackageVersion>
    <AssemblyVersion>$(TyneMajorVersion).$(TyneMinorVersion).$(TynePatchVersion)</AssemblyVersion>
  </PropertyGroup>

  <Target Name="EnsureCorrectCiVersion" BeforeTargets="Build" Condition=" '$(CiVersion)' != '' ">
    <Error Code="TYNE_CI_VERSION_MISMATCH" Text="The CI tag '$(CiVersion)' does not match the package version '$(Version)'." Condition=" '$(CiVersion)' != '' AND '$(CiVersion)' != '$(PackageVersion)' " />
  </Target>
  
  <Target Name="EnsureDescriptionSet" BeforeTargets="Build" Condition="$(IsPackable)">
    <Error Code="TYNE_PKG_NO_DESCRIPTION" Text="No &lt;Description&gt; property set." Condition=" '$(Description)' == '' " />
  </Target>

  <PropertyGroup Label="Packaging" Condition="$(IsPackable)">
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PackageProjectUrl>https://alexnoddings.github.io/Tyne</PackageProjectUrl>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageIcon>package.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <Deterministic>true</Deterministic>
  </PropertyGroup>

  <ItemGroup Label="Package files" Condition="$(IsPackable)">
    <None Include="README.md" Pack="true" PackagePath="" />
    <None Include="$(MSBuildThisFileDirectory)assets\logo.png" Pack="true" PackagePath="package.png" Visible="false" />
    <None Include="Package.props" Pack="true" PackagePath="build\$(AssemblyName).props" Condition="Exists('Package.props')" />
    <None Include="Package.targets" Pack="true" PackagePath="build\$(AssemblyName).targets" Condition="Exists('Package.targets')" />
  </ItemGroup>

  <ItemGroup Label="Packaging" Condition="$(IsPackable)">
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
  </ItemGroup>

  <PropertyGroup Label="Repository info">
    <RepositoryUrl>https://github.com/alexnoddings/Tyne</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <PropertyGroup Label=".NET analysers">
    <EnableNETAnalyzers>true</EnableNETAnalyzers>
    <AnalysisLevel>latest</AnalysisLevel>
    <AnalysisMode>AllEnabledByDefault</AnalysisMode>
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
  </PropertyGroup>

  <ItemGroup Label="Project analysers">
    <PackageReference Include="AsyncFixer" Version="1.6.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
    <PackageReference Include="SonarAnalyzer.CSharp" Version="9.4.0.72892">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup Label="Warnings and errors">
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <!--
      AsyncFixer01: The method does not need to use async/await.
                    While technically true, it can lead to uglier code and poor stack traces.
    -->
    <NoWarn>$(NoWarn);AsyncFixer01</NoWarn>
    <!--
      CS1591: Missing XML comment for publicly visible type or member.
              This should be removed once all public types have XML docs associated.

    -->
    <NoWarn>$(NoWarn);CS1591</NoWarn>
  </PropertyGroup>

  <ItemGroup Label="Embedded resources">
    <EmbeddedResource Include="**/*.restext">
      <LogicalName>$(AssemblyName).%(FileName).resources</LogicalName>
    </EmbeddedResource>
  </ItemGroup>

</Project>
