; Adapted from https://github.com/dotnet/aspnetcore/main/.editorconfig
;          and https://github.com/dotnet/runtime/main/.editorconfig
root = true

[*]
indent_style = space
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.cs]
# Indentation preferences
indent_size = 4
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async:suggestion

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true

# Using directive settings
dotnet_sort_system_directives_first = true
csharp_using_directive_placement = outside_namespace:warning

# Namespace settings
csharp_style_namespace_declarations = file_scoped

# No curly braces are fine for one line of code
csharp_prefer_braces = when_multiline

# Prefer expression bodied members when single line (e.g. int GetValue() => _value)
csharp_style_expression_bodied_methods = when_on_single_line
csharp_style_expression_bodied_operators = when_on_single_line
csharp_style_expression_bodied_local_functions = when_on_single_line

# Conditional return expressions aren't always as readable, so only apply them as suggestions
dotnet_diagnostic.IDE0046.severity = suggestion

# Use PascalCase for constants
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds   = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Use _camelCase for internal and private fields
# dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
# dotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields
# dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style
# dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
# dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
# dotnet_naming_style.camel_case_underscore_style.required_prefix = _
# dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# Don't use this. qualifier
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_property = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_event = false:warning

# Use keywords instead of BCL types (i.e. int x = .. over Int32, and int.MaxValue over Int32.MaxValue)
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# Use var all the time
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion

[*.{xml,config,*proj,nuspec,props,resx,targets,yml,tasks}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

[*.json]
indent_size = 2

[*.{ps1,psm1}]
indent_size = 4

[*.{razor,cshtml}]
charset = utf-8-bom
