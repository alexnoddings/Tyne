@page "/examples/components/TyneButton"

<TynePageTitle Value="Examples" />

<MudContainer MaxWidth="MaxWidth.Medium" Class="pt-6">
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-3">
        <code>@nameof(TyneButton)</code> examples
    </MudText>
    <MudPaper Class="ml-n4 px-2 pt-4 pb-2">
        <MudText Typo="Typo.h5" Align="Align.Center">
            <code>@nameof(ButtonLockStyle)</code> variants (defaults to <code>@ButtonLockStyle.Bar</code>)
        </MudText>
        <MudDivider Class="my-3" Light="true" />
        <MudGrid>
            @foreach (var buttonLockStyle in Enum.GetValues<ButtonLockStyle>())
            {
                <MudItem Class="d-flex flex-column align-center gap-2" xs="3">
                    <MudText Typo="Typo.h6">
                        @buttonLockStyle
                    </MudText>
                    @foreach (var variant in Enum.GetValues<Variant>())
                    {
                        <TyneButton Size="_size" Color="_colour" OnClick="ClickHandler" LockStyle="@buttonLockStyle" Variant="@variant">
                            TyneButton
                        </TyneButton>
                    }
                </MudItem>
            }
        </MudGrid>
        <MudDivider Class="mt-6" Light="true" />
        <div class="d-flex flex-row gap-4 align-stretch my-4 px-4">
            <MudSelect @bind-Value="_size" Variant="Variant.Outlined" Label="Size" Margin="Margin.Dense">
                <MudSelectItem Value="Size.Small">Small</MudSelectItem>
                <MudSelectItem Value="Size.Medium">Medium</MudSelectItem>
                <MudSelectItem Value="Size.Large">Large</MudSelectItem>
            </MudSelect>
            <MudSelect @bind-Value="_colour" Variant="Variant.Outlined" Label="Colour" Margin="Margin.Dense">
                @foreach (var c in Enum.GetValues<Color>())
                {
                    <MudSelectItem Value="c">
                        <span class="d-flex flex-row align-center gap-2">
                            <MudIcon Icon="@Icons.Material.Filled.Build" Color="c" />
                            @c.ToDescriptionString()
                        </span>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Primary"
                       OnClick="() => SetTaskComplete(false)"
                       Disabled="_tcs is null">
                Complete
            </MudButton>
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Error"
                       OnClick="() => SetTaskComplete(true)"
                       Disabled="_tcs is null">
                Throw
            </MudButton>
        </div>
    </MudPaper>
</MudContainer>

@code
{
    private TaskCompletionSource? _tcs;
    private Size _size = Size.Medium;
    private Color _colour = Color.Primary;

    private Task ClickHandler() =>
        (_tcs ??= new()).Task;

    private void SetTaskComplete(bool exception)
    {
        _ = exception
            ? _tcs?.TrySetException(new InvalidOperationException("Example page exception."))
            : _tcs?.TrySetResult();

        _tcs = null;
    }
}
