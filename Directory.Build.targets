<Project>

  <!-- Sets flags for certain project types -->
  <PropertyGroup Label="Project flags">
    <!--
      docs/example/test projects should set their own flags.
      If they aren't already set, we assume them to be false.
    -->
    <IsDocsProject Condition=" '$(IsDocsProject)' == '' ">false</IsDocsProject>
    <IsExampleProject Condition=" '$(IsExampleProject)' == '' ">false</IsExampleProject>
    <IsTestProject Condition=" '$(IsTestProject)' == '' ">false</IsTestProject>
    <!--
      Packages should be marked as packable.
      The easiest way to do this is by excluding docs/examples/tests.
    -->
    <IsPackable Condition="
                '$(IsPackable)' == ''
                AND !$(IsDocsProject)
                AND !$(IsExampleProject)
                AND !$(IsTestProject)">true</IsPackable>
    <IsPackable Condition=" '$(IsPackable)' == '' ">false</IsPackable>
    <!-- Ensure this is a CI build if we're executing on a GitHub action. -->
    <ContinuousIntegrationBuild Condition=" '$(GITHUB_ACTIONS)' == 'true' ">true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <!--
    Makes internals of non-test projects available to:
    - their *.Tests project counterpart
    - the test utilities project
  -->
  <ItemGroup Label="Visibility for test projects" Condition="!$(IsTestProject)">
    <InternalsVisibleTo Include="$(AssemblyName).Tests" />
    <InternalsVisibleTo Include="Tyne.TestUtilities" />
  </ItemGroup>

  <!--
    Ensures a <Description> property is set for anything packable.
    If a <Description> property isn't found, and the project is packable, raise an error.
  -->
  <Target Name="EnsureDescriptionSet" BeforeTargets="Build" Condition="$(IsPackable)">
    <Error Code="TYNE_PKG_NO_DESCRIPTION" Text="No &lt;Description&gt; property set." Condition=" '$(Description)' == '' " />
  </Target>

  <!-- Packaging properties for packable projects. -->
  <PropertyGroup Label="Packaging" Condition="$(IsPackable)">
    <!-- Embed project source files that are not tracked by the source control or imported from a source package to the generated PDB. -->
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <!-- Generate a symbols file when building. -->
    <IncludeSymbols>true</IncludeSymbols>
    <!-- Use snupkgs for symbol packages. -->
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <!-- Generates an XML documentation file. -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <!-- The 'Project website' link on nuget.org. -->
    <PackageProjectUrl>https://alexnoddings.github.io/Tyne</PackageProjectUrl>
    <!-- Publish the repository URL along with the package. -->
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <!-- The SPDX license of the repo - ensures that nuget/vs/etc show the right license. -->
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <!--
      Path to the Tyne icon - every package shares the same icon for ease.
      Note that this file doesn't actually *exist* anywhere, instead the targets file includes it from the assets folder for each packable project.
    -->
    <PackageIcon>package.png</PackageIcon>
    <!-- Path to the package's readme - every package has their own tailored readme. -->
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <!--
      Causes the compiler to produce an assembly whose byte-for-byte output is identical across compilations for identical inputs.
      This is important for builds to be verifiable.
    -->
    <Deterministic>true</Deterministic>
  </PropertyGroup>

  <!-- Package files for packable projects. -->
  <ItemGroup Label="Package files" Condition="$(IsPackable)">
    <None Include="README.md" Pack="true" PackagePath="" />
    <None Include="$(MSBuildThisFileDirectory)assets\logo.png" Pack="true" PackagePath="package.png" Visible="false" />
    <None Include="Package.props" Pack="true" PackagePath="build\$(AssemblyName).props" Condition="Exists('Package.props')" />
    <None Include="Package.targets" Pack="true" PackagePath="build\$(AssemblyName).targets" Condition="Exists('Package.targets')" />
  </ItemGroup>

  <!--
    SourceLinking for packable projects.
    This adds source control metadata to built assets, which improves the developer debugging experience.
  -->
  <ItemGroup Label="Packaging" Condition="$(IsPackable)">
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
  </ItemGroup>

  <!--
    Common versions of packages used across the solution.
    This doesn't *add* these packages to every project, instead it ensures that
    every package set up to use one of these is using the same unified version.
  -->
  <ItemGroup Label="Package versions">
    <PackageReference Update="FluentValidation" Version="11.8.1" />
    <PackageReference Update="MediatR" Version="12.2.0" />
    <PackageReference Update="MediatR.Contracts" Version="2.0.1" />
    <PackageReference Update="Microsoft.AspNetCore.Components" Version="7.0.14" />
    <PackageReference Update="Microsoft.EntityFrameworkCore" Version="7.0.8" />
    <PackageReference Update="Microsoft.EntityFrameworkCore.Relational" Version="7.0.8" />
    <PackageReference Update="Microsoft.Extensions.Configuration.Abstractions" Version="7.0.0" />
    <PackageReference Update="Microsoft.Extensions.Configuration.Binder" Version="7.0.4" />
    <PackageReference Update="Microsoft.Extensions.DependencyInjection.Abstractions" Version="7.0.0" />
    <PackageReference Update="Microsoft.Extensions.Hosting.Abstractions" Version="7.0.0" />
    <PackageReference Update="Microsoft.Extensions.Logging.Abstractions" Version="7.0.1" />
    <PackageReference Update="Microsoft.Extensions.Options" Version="7.0.1" />
    <PackageReference Update="MudBlazor" Version="6.11.1" />
  </ItemGroup>

  <!-- Same as above, but for test packages. -->
  <ItemGroup Label="Test package versions">
    <PackageReference Update="bunit" Version="1.21.9" />
    <PackageReference Update="coverlet.collector" Version="6.0.0" />
    <PackageReference Update="Microsoft.NET.Test.Sdk" Version="17.3.2" />
    <PackageReference Update="NSubstitute" Version="5.0.0" />
    <PackageReference Update="NSubstitute.Analyzers.CSharp" Version="1.0.16" />
    <PackageReference Update="xunit" Version="2.4.2" />
    <PackageReference Update="xunit.runner.visualstudio" Version="2.4.5" />
  </ItemGroup>

  <!-- Configures global usings for very common namespaces in test projects. -->
  <ItemGroup Label="Global usings" Condition="$(IsTestProject)">
    <Using Include="NSubstitute" />
    <Using Include="Xunit" />
  </ItemGroup>

  <!-- These warnings can be ignored for non-shipped code. -->
  <PropertyGroup Label="Warnings and errors" Condition=" !$(IsPackable) ">
    <!--
      CA1303: Method passes a literal string to Console.WriteLine(). Retrieve them from a resource table instead.
              This is not necessary for non-shipped code, and makes examples harder to read.
    -->
    <NoWarn>$(NoWarn);CA1303</NoWarn>
    <!--
      CA1819: Do not directly await a Task.
              .ConfigureAwait(...) is beneficial to packages, but it's benefits are
              eclipsed by it's added difficulty to read in example and test projects.
    -->
    <NoWarn>$(NoWarn);CA2007</NoWarn>
  </PropertyGroup>

  <!-- These warnings can be ignored for specifically test code. -->
  <PropertyGroup Label="Warnings and errors" Condition=" $(IsTestProject) ">
    <!--
      CA1707: Identifiers should not contain underscores.
      REASON: Underscores help clarify what test cases are testing.
    -->
    <NoWarn>$(NoWarn);CA1707</NoWarn>
    <!--
      CA1819: Properties should not return arrays.
      REASON: This is useful for providing theories with member data in tests.
    -->
    <NoWarn>$(NoWarn);CA1819</NoWarn>
  </PropertyGroup>

  <!-- These warnings are dependant on Configuration. -->
  <PropertyGroup Label="Warnings and errors">
    <!--
      S125: Sections of code should not be commented out.
            While true for shipped code, this can be a real pain while developing.
            NOTE: This is only set as a warning during development.
    -->
    <WarningsNotAsErrors Condition=" '$(Configuration)' == 'Debug' ">
      $(WarningsNotAsErrors);S125
    </WarningsNotAsErrors>
  </PropertyGroup>

</Project>
